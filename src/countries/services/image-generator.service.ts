// src/countries/services/image-generator.service.ts
import { Injectable } from '@nestjs/common';
import { createCanvas, loadImage, registerFont } from 'canvas';
import { Country } from '../entities/country.entity';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class ImageGeneratorService {
  private readonly cacheDir = path.join(process.cwd(), 'cache');

  constructor() {
    // Ensure cache directory exists
    if (!fs.existsSync(this.cacheDir)) {
      fs.mkdirSync(this.cacheDir, { recursive: true });
    }
  }

  async generateSummaryImage(
    countries: Country[],
    totalCountries: number,
    lastRefreshed: Date,
  ): Promise<string> {
    const width = 800;
    const height = 600;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    // Background
    ctx.fillStyle = '#f8f9fa';
    ctx.fillRect(0, 0, width, height);

    // Title
    ctx.fillStyle = '#212529';
    ctx.font = 'bold 24px Arial';
    ctx.fillText('Country Data Summary', 50, 50);

    // Total countries
    ctx.font = '18px Arial';
    ctx.fillText(`Total Countries: ${totalCountries}`, 50, 100);

    // Last refreshed
    ctx.fillText(`Last Refreshed: ${lastRefreshed.toLocaleString()}`, 50, 130);

    // Top 5 GDP countries
    ctx.fillText('Top 5 Countries by GDP:', 50, 180);
    
    const topCountries = countries
      .filter(c => c.estimatedGdp)
      .sort((a, b) => b.estimatedGdp - a.estimatedGdp)
      .slice(0, 5);

    let yPos = 220;
    topCountries.forEach((country, index) => {
      ctx.fillText(
        `${index + 1}. ${country.name}: $${(country.estimatedGdp / 1e9).toFixed(2)}B`,
        70,
        yPos
      );
      yPos += 30;
    });

    // Footer
    ctx.fillStyle = '#6c757d';
    ctx.font = '12px Arial';
    ctx.fillText('Generated by Country API', 50, height - 30);

    const filePath = path.join(this.cacheDir, 'summary.png');
    const buffer = canvas.toBuffer('image/png');
    fs.writeFileSync(filePath, buffer);

    return filePath;
  }

  getImagePath(): string {
    return path.join(this.cacheDir, 'summary.png');
  }

  imageExists(): boolean {
    return fs.existsSync(this.getImagePath());
  }
}